extends ../../layouts/default

block js

block append variables 
    - var currentPage = "codeChild";

block content
    .container 
        +codeRibbon(9,"Tenbin - Alice in Borderland","/code/ordinaryidle.html","/code/domusai.html")

        .text-center
            p.italic A 5-player mini-game inspired by a TV show on Netflix. (今際の国のアリス)
            p Sep 2023
            p: a(href="https://play.google.com/store/apps/details?id=com.kidprof.tenbin") Try it now (Google Play, preferred)
            p: a(href="https://testflight.apple.com/join/XtauCeGR") Try it now (iOS TestFlight)
        
        p What's so special about Tenbin?
        ul
            li First multiplayer game
            li Used a lot of newly self-learnt framework and technologies, including TypeScript, WebSocket, Kivy and the Async IO library 
        p What can be improved?
        ul
            li Now that I have used multiple frameworks, I would prefer Flutter over Kivy for more community support.
            li I could do better art works.
        
        h2.mt-4 Technologies
        hr
        .languagesGroup 	
            a(href="https://expressjs.com/")
                +figureWithCaption("/images/code/languages/expressjs.png","ExpressJS","language")
            a(href="https://www.typescriptlang.org/")
                +figureWithCaption("/images/code/languages/typescript.png","TypeScript","language")
            a(href="https://kivy.org/")
                +figureWithCaption("/images/code/languages/kivy.png","Kivy","language")
            a(href="https://docs.python.org/3/library/asyncio.html")
                +figureWithCaption("/images/code/languages/asyncio.png","Python Async IO","language")
        #collapseTechnology.collapse
            p My plan was to try out different programming languages and frameworks while doing this project and work out how to make a multiplayer game. The main gameplay this time is arguably simple, just receiving the guesses and calculating the average. However, the challenge actually comes in communicating via WebSocket. Traditional REST APIs should not be used for real-time communication like this. WebSocket requires ping and pong messages to be exchanged at a fixed interval while handling the main gameplay. This is calling for a lot of asynchronous code. Luckily I can still handle it with what I have learnt from my Concurrent Programming lectures. Another difficulty is to keep the server up when a player disconnects from the game at any possible moment. I typed my JavaScript backend as I heard that the backend of a project has to be more robust. I am also amazed how ExpressJS can be used as a proper server without having a frontend like I usually do in the past.
            p: a(href="https://github.com/OscarMui/balance-scale-backend") Source code (ExpressJS TypeScript backend)
            p: a(href="https://github.com/OscarMui/balance-scale-frontend-python") Source code (Python CLI frontend for testing)
            p My main requirement for the frontend is the ability to compile into an Android app. After writing the Python CLI frontend for testing my backend, I am too lazy to switch to another language. Therefore Kivy became my choice. I kind of regret it to be honest because the community support is quite little in my opinion. I hit a lot of obstacles especially when building the app into executables and apks. But at least it works so I probably should not complain too much about it.
            p: a(href="https://github.com/OscarMui/balance-scale-frontend-kivy") Source code (Kivy Python frontend)
            

        a.read-more(data-bs-toggle="collapse" href="#collapseTechnology" aria-expanded="false" aria-controls="collapseAcademics")
            span.collapsed.technicalStuff Technical stuff
            span.expanded Show less
    
        .row
            .col-12.col-md-6: img(src="/images/code/code-tenbin-0.png").w-100.mt-3
            .col-12.col-md-6: img(src="/images/code/code-tenbin-1.png").w-100.mt-3
            .col-12.col-md-6: img(src="/images/code/code-tenbin-2.png").w-100.mt-3
            .col-12.col-md-6: img(src="/images/code/code-tenbin-3.png").w-100.mt-3
            .col-12.col-md-6: img(src="/images/code/code-tenbin-4.png").w-100.mt-3
            .col-12.col-md-6: img(src="/images/code/code-tenbin-5.png").w-100.mt-3
        h2.mt-4 Game Rules
        hr
        p.bold TL;DR Just choose a number between 0 and 100 each round and have fun. :)
        p Every player chooses a number between 0 and 100 in each round. The player closest to the target wins the round. The target would be the average of the numbers multiplied by 0.8. 
        p All players start with 0 points. If a player reaches -5 points, it is a GAME OVER for that player. The last person standing wins. 
        p A new rule will be introduced for every player eliminated.